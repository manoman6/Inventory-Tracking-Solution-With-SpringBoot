An Inventory Management Solution Modernizing a Spring Application

Tasked with modernizing a web application built using Spring with a Java backend and HTML user interface, this solution created inventory managing and tracking. With the ability to log new parts, made both in-house and by a third-party. Utilizing SpringBoot with a Model View Controller design pattern, new parts and products can be added, logged, built, deleted and sold while maintaining accurate inventory.
For a Video Demonstration
Please Visit: https://youtu.be/runqWnv14rU
Getting Started
To simplify trying out this program on your own, I have provided a Docker File and a prebuilt JAR so you do not need Maven installed to run it on your own device. Follow the steps below to build and run the application using Docker.
Prerequisites
•	Have Docker installed on your machine. [Click Here For the Download Page]

How to Pull and Run the Docker Image
•	In the commandline/terminal pull the image to your machine:
o	Docker pull ghcr.io/manoman6/inventory-tracking-solution-with-springboot:latest
•	Run the Container on your local machine:
o	Docker run -p 8080:8080 ghcr.io/manoman6/inventory-tracking-solution-with-springboot:latest
•	Open your Browser type into the URL
o	http://localhost:8080



How to Build and Run Using the Docker File Without the Image
**Note**: The prebuilt JAR file in `target/` is provided for convenience. It represents the current stable version of the project. To build your own JAR, use `mvn clean package`.
o	Clone this repository using commandline/terminal:
o	Git clone https://github.com/manoman6/Inventory-Tracking-Solution-With-SpringBoot.git
o	Cd Inventory-Tracking-Solution-With-SpringBoot
•	Build the Docker Image
o	Docker build -t inventory-tracking-solution-with-springboot .
•	Run the Docker Image
o	Docker run -p 8080:8080 inventory-tracking-solution-with-springboot
•	Open your Browser type into the URL
o	http://localhost:8080
